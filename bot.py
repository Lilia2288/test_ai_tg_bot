import os
import random
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.error import TelegramError
from recipes import RECIPES

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
TOKEN = '7601466273:AAGGx1fCt_c9JjS36GZiw2KOKg_NrkX1Xes'  # Direct token assignment

# Recipe categories
CATEGORIES = {
    "main": "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞",
    "soups": "–°—É–ø—ã",
    "salads": "–°–∞–ª–∞—Ç—ã",
    "desserts": "–î–µ—Å–µ—Ä—Ç—ã"
}

# Difficulty levels
DIFFICULTY_LEVELS = {
    "easy": "–õ–µ–≥–∫–∞—è",
    "medium": "–°—Ä–µ–¥–Ω—è—è",
    "hard": "–°–ª–æ–∂–Ω–∞—è"
}

# Time ranges
TIME_RANGES = {
    "15": "–î–æ 15 –º–∏–Ω—É—Ç",
    "30": "15-30 –º–∏–Ω—É—Ç",
    "60": "30-60 –º–∏–Ω—É—Ç",
    "60+": "–ë–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç"
}

def get_recipe_category(recipe):
    """Determine recipe category based on ingredients and name."""
    name = recipe["name"].lower()
    ingredients = [ing.lower() for ing in recipe["ingredients"]]
    
    if any(word in name for word in ["—Å—É–ø", "–±–æ—Ä—â", "–±—É–ª—å–æ–Ω"]):
        return "soups"
    elif any(word in name for word in ["—Å–∞–ª–∞—Ç"]):
        return "salads"
    elif any(word in name for word in ["–∑–∞–ø–µ–∫–∞–Ω–∫–∞", "–ø–∏—Ä–æ–≥", "—Ç–æ—Ä—Ç", "–∫–µ–∫—Å"]):
        return "desserts"
    else:
        return "main"

def get_cooking_time_minutes(cooking_time_str):
    """Convert cooking time string to minutes."""
    try:
        return int(cooking_time_str.split()[0])
    except (ValueError, IndexError):
        return 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "1. üé≤ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç (/random)\n"
        "2. üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –∏–º–µ—é—â–∏–º—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞–º (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)\n"
        "3. üìë –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (/categories)\n"
        "4. ‚è± –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (/time)\n"
        "5. üìä –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (/difficulty)\n"
        "6. üî• –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ (/calories)\n"
        "7. üìù –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ (/list)\n"
        "8. ‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É (/help)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —è–π—Ü–∞, –ø–æ–º–∏–¥–æ—Ä—ã, –ª—É–∫"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send help message."""
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
        "/categories - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "/time - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n"
        "/difficulty - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "/calories - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —è–π—Ü–∞, –ø–æ–º–∏–¥–æ—Ä—ã, –ª—É–∫"
    )
    await update.message.reply_text(help_text)

async def list_recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show list of all recipes."""
    recipes_list = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤:\n\n"
    for i, recipe in enumerate(RECIPES, 1):
        category = CATEGORIES[get_recipe_category(recipe)]
        recipes_list += f"{i}. {recipe['name']} ({category})\n"
    
    await update.message.reply_text(recipes_list)

async def calories_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show calories filter options."""
    keyboard = [
        [InlineKeyboardButton("–î–æ 200 –∫–∫–∞–ª", callback_data="cal_200")],
        [InlineKeyboardButton("200-300 –∫–∫–∞–ª", callback_data="cal_300")],
        [InlineKeyboardButton("300-400 –∫–∫–∞–ª", callback_data="cal_400")],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 400 –∫–∫–∞–ª", callback_data="cal_400+")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)

async def time_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show time filter options."""
    keyboard = [
        [InlineKeyboardButton(TIME_RANGES["15"], callback_data="time_15")],
        [InlineKeyboardButton(TIME_RANGES["30"], callback_data="time_30")],
        [InlineKeyboardButton(TIME_RANGES["60"], callback_data="time_60")],
        [InlineKeyboardButton(TIME_RANGES["60+"], callback_data="time_60+")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def difficulty_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show difficulty filter options."""
    keyboard = [
        [InlineKeyboardButton(DIFFICULTY_LEVELS["easy"], callback_data="diff_easy")],
        [InlineKeyboardButton(DIFFICULTY_LEVELS["medium"], callback_data="diff_medium")],
        [InlineKeyboardButton(DIFFICULTY_LEVELS["hard"], callback_data="diff_hard")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç–∞:", reply_markup=reply_markup)

async def filter_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle filter selection."""
    query = update.callback_query
    await query.answer()
    
    filter_type, value = query.data.split('_')
    
    if filter_type == 'time':
        max_time = int(value) if value != '60+' else float('inf')
        filtered_recipes = [
            r for r in RECIPES 
            if get_cooking_time_minutes(r['cooking_time']) <= max_time
        ]
    elif filter_type == 'diff':
        filtered_recipes = [
            r for r in RECIPES 
            if r['difficulty'].lower() == value
        ]
    elif filter_type == 'cal':
        max_calories = int(value) if value != '400+' else float('inf')
        filtered_recipes = [
            r for r in RECIPES 
            if int(r['calories'].split()[0]) <= max_calories
        ]
    else:
        return
    
    if filtered_recipes:
        recipe = random.choice(filtered_recipes)
        await send_recipe(update, recipe)
    else:
        await query.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."
        )

async def categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show recipe categories."""
    keyboard = [
        [InlineKeyboardButton(cat_name, callback_data=f"category_{cat_id}")]
        for cat_id, cat_name in CATEGORIES.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:", reply_markup=reply_markup)

async def category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle category selection."""
    query = update.callback_query
    await query.answer()
    
    category = query.data.split("_")[1]
    category_recipes = [r for r in RECIPES if get_recipe_category(r) == category]
    
    if category_recipes:
        recipe = random.choice(category_recipes)
        await send_recipe(update, recipe)
    else:
        await query.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.")

async def random_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a random recipe."""
    recipe = random.choice(RECIPES)
    await send_recipe(update, recipe)

async def find_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Find recipes based on available ingredients."""
    user_ingredients = [ing.strip().lower() for ing in update.message.text.split(',')]
    
    matching_recipes = []
    for recipe in RECIPES:
        recipe_ingredients = [ing.lower() for ing in recipe['ingredients']]
        if any(ing in recipe_ingredients for ing in user_ingredients):
            matching_recipes.append(recipe)
    
    if matching_recipes:
        recipe = random.choice(matching_recipes)
        await send_recipe(update, recipe)
    else:
        await update.message.reply_text(
            "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."
        )

async def send_recipe(update: Update, recipe: dict):
    """Send a formatted recipe message."""
    try:
        category = CATEGORIES[get_recipe_category(recipe)]
        message = (
            f"üç≥ {recipe['name']}\n"
            f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe['cooking_time']}\n"
            f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {recipe['difficulty']}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']}\n\n"
            f"üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
            f"{', '.join(recipe['ingredients'])}\n\n"
            f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            f"{recipe['instructions']}"
        )
        
        if update.callback_query:
            await update.callback_query.message.reply_text(message)
        else:
            await update.message.reply_text(message)
    except TelegramError as e:
        logger.error(f"Error sending recipe: {e}")
        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if update.callback_query:
            await update.callback_query.message.reply_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Update {update} caused error {context.error}")
    error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    if update and update.effective_message:
        await update.effective_message.reply_text(error_message)

def main():
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("random", random_recipe))
    application.add_handler(CommandHandler("categories", categories))
    application.add_handler(CommandHandler("time", time_filter))
    application.add_handler(CommandHandler("difficulty", difficulty_filter))
    application.add_handler(CommandHandler("calories", calories_filter))
    application.add_handler(CommandHandler("list", list_recipes))
    application.add_handler(CallbackQueryHandler(category_callback, pattern="^category_"))
    application.add_handler(CallbackQueryHandler(filter_callback, pattern="^(time|diff|cal)_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, find_recipe))
    
    # Add error handler
    application.add_error_handler(error_handler)

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 